        return db.update(ConstantsUsed.TABLE_PRODUCT_DETAILS, contentValues, ConstantsUsed.COLUMN_PRODUCT_ID+"="+productid, null);


https://stackoverflow.com/questions/54175132/manifest-merger-failed-when-adding-latest-room-android-jetpack

adding lib issues
:app already exixts -chanage root file name
main activity layout not recognised - delete evrythin from lib manifest
point to layout activity with package identifier

ndk chain tools not found with [refix abs-linux: create a folder and copy content from existing folder



 <!--android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"--> removed from tab lyout

 https://www.truiton.com/2015/06/android-tabs-example-fragments-viewpager/

         android:elevation="6dp" shadow in tabs

         https://stackoverflow.com/questions/14684913/disabling-animation-in-viewpager



         <?xml version="1.0" encoding="UTF-8"?>
         <layer-list xmlns:android="http://schemas.android.com/apk/res/android">

         <!-- Bottom 2dp Shadow -->
         <item>
             <shape  android:shape="rectangle">

                 <solid android:color="@color/colorBgGrid" />
                 <corners android:radius="@dimen/bg_shape_padding_login" />

             </shape>
         </item>

         <!-- White Top color -->
         <item android:bottom="3px">
             <shape xmlns:android="http://schemas.android.com/apk/res/android"
                 android:shape="rectangle">

                 <solid android:color="@color/colorPrimaryDarkOrange"/>
                 <corners android:radius="@dimen/bg_shape_padding_login"/>
             </shape>

         </item>


         </layer-list>



   //String user_id = productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_USER_ID)));
               // String product_id =  productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_ID)));
                String product_title =  productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_TITLE)));
                String description =  productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_DESCRIPTION)));
                String product_cat_id =  productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_CAT_ID)));
                String unit_of_measure =  productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_UNIT_OF_MEASURE)));
                String serial_code =  productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_SERIAL_CODE)));
                String brand_code = productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_BRAND_CODE)));
                String supplier_code =  productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_SUPPLIER_CODE)));
                double unit_buying_price =  productListCur.getDouble(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_BUYING_PRICE)));
                double unit_selling_price =  productListCur.getDouble(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_SELLING_PRICE)));
                //String item_created_date =  productListCur.getString(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_CREATED_DATE)));
                //int active_status =  productListCur.getInt(productListCur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_ACTIVE_STATUS)));
                //int product_db_status = productListCur.getInt(productListCur.getColumnIndex((ConstantsUsed.COLUMN_CAT_DB_STATUS)));


http://113.59.211.167:4050/product-list


https://stackoverflow.com/questions/35668443/difference-between-pagertabstrip-and-tablayout

https://www.androidhive.info/2015/09/android-material-design-working-with-tabs/





 Toast.makeText(this,"called",Toast.LENGTH_LONG).show();

                String clientId=User.getInstance().getClient_id();
                String catId=clientId+ConstantsUsed.MOBILE+AppFeatures.getTimeStamp();
                db.insertCategoryDetails(clientId,catId,"OTHERS","0","0",1,1);
                catList.add("OTHERS");



https://stackoverflow.com/questions/12659747/call-an-activity-method-from-a-fragment

https://stackoverflow.com/questions/9357668/how-to-store-image-in-sqlite-database

send product details

            JSONArray array = new JSONArray();
            JSONObject params = new JSONObject();
            txtBuyingPrice = 200.00;
            txtSellingPrice = 250.00;
            try {
                params.put("user_id", "USERID112");
                params.put("product_id", "PR112");
                params.put("product_cat_id", "CAT112");
                params.put("serial_code", "");
                params.put("product_title", txtTitle);
                params.put("description", txtDesc);
                params.put("unit_of_measure", "");
                params.put("brand_code", txtBrandCode);
                params.put("supplier_code", txtSupplerCode);
                params.put("unit_buying_price", txtBuyingPrice);
                params.put("unit_selling_price", txtSellingPrice);
                params.put("created_date", "2019-03-12 10:20:22");
                array.put(params);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            ApiCalls netWork = new VolleyCalls();

            netWork.connectToNetWorkWithJson(this, ConstantsUsed.URL_CREATE_PRODUCT, ConstantsUsed.TYPE_CREATE_PRODUCT, array);
//21_3
i passed null for graphicoverlay in BarcodeReaderFragment to hide bar code text

 android:paddingBottom="@dimen/padding"
                android:paddingTop="@dimen/padding"
                android:paddingLeft="@dimen/padding_btn_leftright"
                android:paddingRight="@dimen/padding_btn_leftright"

                https://stackoverflow.com/questions/37072902/android-tablayout-select-first-tab-on-startup

                https://stackoverflow.com/questions/2618272/custom-listview-adapter-getview-method-being-called-multiple-times-and-in-no-co/2639159
                http://www.androiddevelopersolutions.com/2013/07/android-listview-adapter-getview-called.html
                https://books.google.lk/books?id=AdPTDgAAQBAJ&pg=PA416&dq=getView()+Called+multiple+times+for+same+position&hl=ta&sa=X&ved=0ahUKEwjoovDcmKLhAhUUiOYKHe4eAUsQ6AEIMTAB#v=onepage&q=getView()%20Called%20multiple%20times%20for%20same%20position&f=false
                https://stackoverflow.com/questions/18376708/getview-called-multiple-times-in-android


https://stackoverflow.com/questions/26579869/how-can-i-let-users-access-the-internal-storage-directory-of-my-app

                https://stackoverflow.com/questions/28456719/android-view-pager-oncreateview-getting-called-for-both-fragments

                 https://stackoverflow.com/questions/31891178/android-support-design-widget-tablayout-select-tab-programmatically/31919302



                 https://stackoverflow.com/questions/43066117/android-m-write-to-sd-card-permission-denied/43317703
                 https://stackoverflow.com/questions/35484767/activitycompat-requestpermissions-not-showing-dialog-box
https://stackoverflow.com/questions/8887197/reliably-convert-any-object-to-string-and-then-back-again


                 removed camera issue
                 https://developer.android.com/studio/build/manifest-merge
                 https://stackoverflow.com/questions/43212814/android-camera-permissions-denied-without-prompting

                 https://developer.android.com/training/permissions/requesting



                 Step #1: Clone or download git repository
                 $ git clone https://github.com/jjoe64/GraphView.git

                 Step #2: Import GraphView as Module
                 In the Android Studio select the menu item "File > Import Module..." and select the folder of GraphView that you have clones before.

                 Step #3: Add dependency
                 Open the build.gradle file of your app-project submodule, this is typically located at [project-folder]/app/build.gradle.

                 Add this line to the dependencies block:

                     implementation project(':GraphView')

                     setting add :GraphView

                     http://www.sqlitetutorial.net/sqlite-sum/ -sum

                     http://www.sqlitetutorial.net/sqlite-sum/ -distinct



                     /*PdfPCell cell = new PdfPCell(new Phrase(name));
                             cell.setBorder(Rectangle.NO_BORDER);
                             cell.setVerticalAlignment(Element.ALIGN_CENTER);
                             cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                             table.addCell(cell);

                             cell = new PdfPCell(new Phrase(address));
                             cell.setBorder(Rectangle.NO_BORDER);
                             cell.setVerticalAlignment(Element.ALIGN_CENTER);
                             cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                             table.addCell(cell);

                             cell = new PdfPCell(new Phrase(number));
                             cell.setBorder(Rectangle.NO_BORDER);
                             cell.setVerticalAlignment(Element.ALIGN_CENTER);
                             cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                             table.addCell(cell);*/



https://www.mysamplecode.com/2013/05/android-itext-pdf-bluetooth-printer.html



       /* if(firstName.isEmpty()){
            firtNTxt.setHint("EMPTY FIELD");
            firtNTxt.setHintTextColor(Color.RED);
        }else if(lastName.isEmpty()){
            lastNameTxt.setHint("EMPTY FIELD");
            lastNameTxt.setHintTextColor(Color.RED);
        }*//*else if(addressOne.isEmpty()){
            addressOneTxt.setHint("EMPTY FIELD");
            addressOneTxt.setHintTextColor(Color.RED);
        }else */


        recycle view
        https://stackoverflow.com/questions/6201484/resize-images-in-gridview-on-android
        https://developer.android.com/guide/topics/ui/layout/recyclerview

        https://stackoverflow.com/questions/56717812/manifest-merger-failed-with-firebase-auth

        https://stackoverflow.com/questions/14530058/how-can-i-print-an-image-on-a-bluetooth-printer-in-android

        https://github.com/imrankst1221/Thermal-Printer-in-Android/blob/master/ThermalPrinter/app/src/main/java/infixsoft/imrankst1221/printer/MainActivity.java

get buttons at d bottom of linear layout
https://stackoverflow.com/questions/14779688/put-buttons-at-bottom-of-screen-with-linearlayout


device is not compatible with your app error
https://stackoverflow.com/questions/21484209/play-store-reports-your-device-isnt-compatible-with-this-version-but-it-insta


printing formats
https://stackoverflow.com/questions/14285822/format-text-in-bluetooth-printer/15981715


https://stackoverflow.com/questions/49753098/my-drawableleft-disappear-if-i-use-passwordtoggleenabled-edittext

bluettoth closing early bug
https://stackoverflow.com/questions/18524979/android-bluetooth-printer-not-finished-printing-but-throws-ioexception-socket
https://stackoverflow.com/questions/36564511/out-of-memory-error-when-calling-web-api-using-volley-in-android


package com.retailx.dreamdx.retailx.Syncronisation;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.content.Context;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Build;
import android.support.v4.app.NotificationCompat;
import android.support.v4.app.NotificationManagerCompat;
import android.util.Log;
import android.widget.Toast;

import com.android.volley.Cache;
import com.android.volley.Network;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.BasicNetwork;
import com.android.volley.toolbox.DiskBasedCache;
import com.android.volley.toolbox.HurlStack;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.retailx.dreamdx.retailx.POJO.PaymentMethod;
import com.retailx.dreamdx.retailx.POJO.Product;
import com.retailx.dreamdx.retailx.R;
import com.retailx.dreamdx.retailx.UtilityFunctions;
import com.retailx.dreamdx.retailx.apicalls.ApiCalls;
import com.retailx.dreamdx.retailx.apicalls.AppSingleton;
import com.retailx.dreamdx.retailx.apicalls.ResponseParser;
import com.retailx.dreamdx.retailx.apicalls.VolleyCalls;
import com.retailx.dreamdx.retailx.database.DBHelper;
import com.retailx.dreamdx.retailx.sharedpreference.Constants;
import com.retailx.dreamdx.retailx.sharedpreference.SharedPreference;
import com.retailx.dreamdx.retailx.utils.AppFeatures;
import com.retailx.dreamdx.retailx.utils.ConstantsUsed;
import com.retailx.dreamdx.retailx.utils.Validator;
//import com.squareup.picasso.Downloader;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.net.URL;
import java.util.HashMap;
import java.util.Map;

public class SyncFunctions {

    static public String userId="-1";
    static public Context context;
    static public DBHelper db;
    final static String CHANNEL_ID="1000";
    static Notification notification;
    static NotificationManagerCompat notificationManager;

    public static  void syncWithServer(Context ctx, String userid){
        userId=userid;
        context=ctx;
        db=new DBHelper(ctx);


        if(UtilityFunctions.isNetworkConnected(context) || UtilityFunctions.isInternetAvailable()) {

            if (userId != null && !userId.equalsIgnoreCase("-1")) {

                syncWithServerCategory( context,  userId);

                syncWithServerProduct(context,userId);

                syncWithServerCustomer(context,userId);

                syncWithServerTransactions(context,userId);

                getAllServerError(context);

                getAllCategoriesFromServer(context,userId);

                getAllProductsFromServer(context,userId);

                getBussinessDetails(context,userId);

                //syncWithServerImages(context);


            }
        }

    }

    public static final String TAG = "MyTag";
    static StringRequest stringRequest;
    static RequestQueue requestQueue;
    static JsonArrayRequest jobReq;
    static Cache cache ;


    private static void syncWithServerStringPost(final Context ctx,String url,final int type,final Map<String, String> params){

        cache = new DiskBasedCache(ctx.getCacheDir(), 1024 * 1024); // 1MB cap
        requestQueue = AppSingleton.getInstance(ctx).
                getRequestQueue();

        requestQueue.start();

        stringRequest = new StringRequest(Request.Method.POST, url,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        if (response != null && response.length() > 0) {
                            ResponseParser.PARSE_JSON(ctx, response, type, setUpGson());
                        }

                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                Toast.makeText(ctx,"Error"+error.toString(),Toast.LENGTH_SHORT).show();

            }
        }) {
            @Override
            protected Map<String, String> getParams() {

                return params;
            }

        };

        stringRequest.setTag(TAG);


        AppSingleton.getInstance(ctx).addToRequestQueue(stringRequest);


    }



    private static void syncWithServerJsonArrayPostRequest(final Context ctx, String url, final int type, final JSONArray jsonArray){

        cache = new DiskBasedCache(ctx.getCacheDir(), 1024 * 1024); // 1MB cap
        requestQueue = AppSingleton.getInstance(ctx).
                getRequestQueue();

        requestQueue.start();

        jobReq = new JsonArrayRequest(Request.Method.POST, url, jsonArray,
                new Response.Listener<JSONArray>() {
                    @Override
                    public void onResponse(JSONArray jsonArray) {
                        if (jsonArray.toString() != null && jsonArray.toString().length() > 0) {
                            ResponseParser.PARSE_JSON(ctx, jsonArray.toString(), type, setUpGson());
                        }

                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError volleyError) {
                        Toast.makeText(ctx, "NETWORK ERROR"+volleyError.toString()
                                , Toast.LENGTH_LONG).show();
                    }
                });

        jobReq.setTag(TAG);

        AppSingleton.getInstance(ctx).addToRequestQueue(jobReq);

    }

    static private Gson gson;
    private static  Gson setUpGson() {
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.setDateFormat("M/d/yy hh:mm a");
        gson = gsonBuilder.create();
        return gson;
    }

    public static void stopAll(){
        if (requestQueue != null) {
            requestQueue.cancelAll(TAG);
        }

    }

    private static void getAllServerError(Context ctx){

        if(!userId.isEmpty() && !userId.equalsIgnoreCase("-1")) {

            Cursor cur = null;
            String brand="0";
            String device="0";
            String model="0";
            String phone_id="0";
            String phone_product="0";
            String sdk="0";
            String release="0";
            String incremental="0";
            String description="0";
            try{
                cur = db.getErrosDetailsNotUploaded();

                while (cur.moveToNext()) {
                    brand = cur.getString(cur.getColumnIndex((ConstantsUsed.BRAND)));
                    device = cur.getString(cur.getColumnIndex((ConstantsUsed.DEVICE)));
                    model = cur.getString(cur.getColumnIndex((ConstantsUsed.MODEL)));
                    phone_id = cur.getString(cur.getColumnIndex((ConstantsUsed.PHONE_ID)));
                    phone_product = cur.getString(cur.getColumnIndex((ConstantsUsed.PHONE_PRODUCT)));
                    sdk = cur.getString(cur.getColumnIndex((ConstantsUsed.SDK)));
                    release = cur.getString(cur.getColumnIndex((ConstantsUsed.RELEASE)));
                    incremental = cur.getString(cur.getColumnIndex((ConstantsUsed.INCREMENTAL)));
                    description = cur.getString(cur.getColumnIndex((ConstantsUsed.DESCRIPTION)));
                    description=description.replace(" ", "");
                }


            }catch (Exception e){


            }finally{
                if(cur!=null){
                    cur.close();
                }

                ApiCalls apicalls=new VolleyCalls();
                Map<String,String> params = new HashMap<String, String>();
                params.put("user_id",userId);
                params.put("brand",brand);
                params.put("model",model);
                params.put("id",phone_id);
                params.put("product",phone_product);
                params.put("sdk",sdk);
                params.put("release",release);
                params.put("incremental",incremental);
                params.put("error_description",description);
                params.put("device",device);
                apicalls.connectToNetworkPost(ctx, ConstantsUsed.URL_ERROR_REPORT,ConstantsUsed.TYPE_ERROR,params);

            }
        }

    }

    private static void getBussinessDetails(Context ctx, String clientId){
        if (!clientId.isEmpty() && !clientId.equalsIgnoreCase("-1")) {
            String name="0";
            String address="0";
            String number="0";
            Cursor cur = null;
            try{
                cur = db.getBussinessDetailsNotUploaded();

                while (cur.moveToNext()) {
                    name = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_BUSSINESS_NAME)));
                    address = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_BUSSINESS_ADDRESS)));
                    number = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_BUSSINESS_NUMBER)));
                }


            }catch (Exception e){


            }finally{
                if(cur!=null){
                    cur.close();
                }

                Map<String,String> params = new HashMap<String, String>();
                params.put("user_id",clientId);
                params.put("first_name","System");
                params.put("last_name","User");
                params.put("company_name",name);
                params.put("contact_number",number);
                params.put("address",address);
                syncWithServerStringPost(ctx, ConstantsUsed.URL_CREATE_BUSSINESS,ConstantsUsed.TYPE_BUSSINESS_INFO,params);

            }
        }
    }

    private static  void syncWithServerCustomer(Context ctx,String userId){

        if (!userId.isEmpty() && !userId.equalsIgnoreCase("-1")) {

            Cursor cur = null;
            JSONArray customer_array=null;
            customer_array = new JSONArray();

            try {
                cur = db.getCustomerDetailsNotUploaded();

                while (cur.moveToNext()) {
                    String cust_id = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CUSTOMER_ID)));
                    String cust_name = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CUSTOMER_NAME)));
                    String cust_number = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CUSTOMER_NUMBER)));
                    String cust_gender = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CUSTOMER_GENDER)));
                    String cust_email = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CUSTOMER_EMAIL)));
                    String cust_is_vat = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_IS_VAT)));

                    try {
                        JSONObject customerObje = new JSONObject();
                        customerObje.put("user_id", userId);
                        customerObje.put("customer_type", cust_gender);
                        customerObje.put("email_id", cust_email);
                        customerObje.put("customer_id", cust_id);
                        customerObje.put("customer_name", cust_name);//hardcoded
                        customerObje.put("mobile_number", cust_number);
                        customerObje.put("vat_enabled", cust_is_vat);

                        customer_array.put(customerObje);

                  } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }

            } catch (Exception e) {
                Toast.makeText(ctx, "ERROR" + e.getMessage().toString(), Toast.LENGTH_LONG).show();
            } finally {
                if(cur!=null)
                    cur.close();


                if(customer_array.length()>0) {
                    Toast.makeText(ctx, "Server Customer" , Toast.LENGTH_LONG).show();
                    syncWithServerJsonArrayPostRequest(ctx, ConstantsUsed.URL_CUSTOMER_UPLOAD, ConstantsUsed.TYPE_UPLOAD_CUSTOMER, customer_array);
                }
            }

        }
    }



    private static void getAllProductsFromServer(Context ctx, String clntId){

        if (!clntId.isEmpty() && !clntId.equalsIgnoreCase("-1")) {
            Toast.makeText(ctx, "GetProduct" , Toast.LENGTH_LONG).show();

            Map<String,String> params = new HashMap<String, String>();
            params.put("user_id",clntId);
            syncWithServerStringPost(ctx, ConstantsUsed.URL_GET_PRODUCTS,ConstantsUsed.TYPE_GET_PRODUCTS,params);

        }

    }

    private static void createNotificationChannel(Context ctx) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel serviceChannel = new NotificationChannel(
                    CHANNEL_ID,
                    "Foreground Service Channel",
                    NotificationManager.IMPORTANCE_DEFAULT
            );

            NotificationManager notificationManager= ctx.getSystemService(NotificationManager.class);
            notificationManager.createNotificationChannel(serviceChannel);
        }
    }

    private static  void getAllCategoriesFromServer(Context ctx, String clntId){

        if (!clntId.isEmpty() && !clntId.equalsIgnoreCase("-1")) {
            Toast.makeText(ctx, "Get category" , Toast.LENGTH_LONG).show();

            Map<String,String> params = new HashMap<String, String>();
            params.put("user_id",clntId);
            syncWithServerStringPost(ctx, ConstantsUsed.URL_GET_CATEGORY,ConstantsUsed.TYPE_GET_CATEGORY,params);

            }

        }

    public static void syncWithServerCategory(Context ctx, String userId){


        JSONArray array=new JSONArray();


        Cursor cur = null;
        try {
            cur = db.getCategoriesNotUploaded(userId);


            while (cur.moveToNext()) {
                String title = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CAT_TITLE)));
                String date = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CAT_DATE)));
                String id = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CAT_ID)));
                String desc = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CAT_DESCRIPTION)));

                JSONObject params=new JSONObject();
                try {
                    params.put(ConstantsUsed.COLUMN_MOBILE_ID,id);
                    params.put(ConstantsUsed.COLUMN_USER_ID, userId);
                    params.put(ConstantsUsed.COLUMN_CAT_TITLE,title);
                    params.put(ConstantsUsed.COLUMN_CAT_DESCRIPTION,desc);
                    params.put(ConstantsUsed.COLUMN_CAT_DATE,"2019-03-12 10:20:22");
                    array.put(params);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

        } catch (Exception e) {
            Toast.makeText(ctx, "ERROR" + e.getMessage().toString(), Toast.LENGTH_LONG).show();
        } finally {

            if(cur!=null)
            cur.close();

            if(array.length()>0) {
                Toast.makeText(ctx, "Category", Toast.LENGTH_LONG).show();
                syncWithServerJsonArrayPostRequest(ctx, ConstantsUsed.URL_CREATE_CATEGORY, ConstantsUsed.TYPE_CREATE_CATEGORY, array);
            }
        }

    }


    public static void apiCalBackCategory(String res,Context ctx){

        //update local db status
        db.updateCategoryTableDbStatus(0);

        //upload product
        //syncWithServerProduct(ctx);


    }

    public static void apiCalBackCategoryGet(String res,Context ctx){

        //update local db status
        db.updateCategoryTableDbStatus(0);

    }

    public static void apiCalBackProduct(String res,Context ctx){

        //syncWithServerImages(ctx);
        db.updateProductTableDbStatus(0);



    }

    public static void apiCalBackProductImages(String productId,Context ctx){
        //update local db status
        db.updateProductTableImageDbStatus(productId,0);

    }

    public static void apiCalBackCustomer(){

        //update local db status
        db.updateCustomerTableDbStatus(0);

    }

    public static void apiCalBackError(){

        //update local db status
        db.updateCErrorTableDbStatus(0);

    }

    public static void apiCalBackTransaction(String res,Context ctx){

        //update local db status
        db.updateTransactionDetailsTableDbStatus(0,"");
        db.updateTransactionSummaryTableDbStatus(0,"");

    }


    private static void syncWithServerTransactions(Context ctx,String clientId) {


        if (!clientId.isEmpty() && !clientId.equalsIgnoreCase("-1")) {


            String paymentType="1";
            if(PaymentMethod.getInstance().getMethodName().equalsIgnoreCase("CASH")){
                paymentType="1";
            }else if(PaymentMethod.getInstance().getMethodName().equalsIgnoreCase("DEBIT")){
                paymentType="2";
            }else if(PaymentMethod.getInstance().getMethodName().equalsIgnoreCase("CREDIT")){
                paymentType="3";
            }else if(PaymentMethod.getInstance().getMethodName().equalsIgnoreCase("CHEQUE")){
                paymentType="4";
            }else if(PaymentMethod.getInstance().getMethodName().equalsIgnoreCase("QR")){
                paymentType="5";
            }else if(PaymentMethod.getInstance().getMethodName().equalsIgnoreCase("SPLIT")){
                paymentType="6";
            }

            Cursor cur = null;
            Cursor details = null;
            JSONArray transaction_array=null;
            transaction_array = new JSONArray();

            try {
                cur = db.getTransactionsSummaryNotUploaded();
                int i=0;

                while (cur.moveToNext()) {
                    String id = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_TRANSACTION_ID)));
                    Double itemTotalCount = cur.getDouble(cur.getColumnIndex((ConstantsUsed.COLUMN_TOTAL_ITEM_COUNT)));
                    Double itemTotal = cur.getDouble(cur.getColumnIndex((ConstantsUsed.COLUMN_TOTAL_AMOUNT)));
                    String date = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_TRANSACTION_DATE)));
                    String custId = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CUSTOMER_ID)));


                    try {

                        JSONObject transaction_summary = new JSONObject();

                        transaction_summary.put("invoice_number", id);
                        transaction_summary.put("user_id", clientId);
                        transaction_summary.put("customer_id", custId);
                        transaction_summary.put("total_item_count", String.valueOf(itemTotalCount));
                        transaction_summary.put("transaction_total_amount", String.valueOf(itemTotal-Product.getDiscount()));
                        transaction_summary.put("total_tax_amount", "00");//hardcoded
                        transaction_summary.put("item_total_amount", String.valueOf(itemTotal));
                        transaction_summary.put("payment_type", paymentType);
                        transaction_summary.put("discount", String.valueOf(Product.getDiscount()));
                        transaction_summary.put("order_date", date);
                        transaction_summary.put("invoice_type", "1");

                        details = db.getTransactionsDetailsNotUploaded(id);

                        JSONArray item_list = new JSONArray();

                        while (details.moveToNext()) {
                            String productId = details.getString(details.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_ID)));
                            Double itemCount = details.getDouble(details.getColumnIndex((ConstantsUsed.COLUMN_TOTAL_ITEM_UNITS)));
                            Double itemAmount = details.getDouble(details.getColumnIndex((ConstantsUsed.COLUMN_TOTAL_ITEM_AMOUNT)));

                            JSONObject item_list_obj = new JSONObject();
                            item_list_obj.put("item_id",  productId);
                            item_list_obj.put("total_units", String.valueOf(itemCount));
                            item_list_obj.put("total_amount", String.valueOf(itemAmount));
                            item_list_obj.put("total_tax", "90.00");//hardcoded
                            item_list_obj.put("item_discount",String.valueOf(Product.getDiscount()));
                            item_list.put(item_list_obj);


                        }
                        transaction_summary.put("item_list", item_list);
                        transaction_array.put(transaction_summary);


                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }

            } catch (Exception e) {
                Toast.makeText(ctx, "ERROR" + e.getMessage().toString(), Toast.LENGTH_LONG).show();
            } finally {
                if(cur!=null)
                cur.close();
                if(details!=null)
                details.close();

                if(transaction_array.length()>0) {
                    Toast.makeText(ctx, "Server Transactions" , Toast.LENGTH_LONG).show();

                    syncWithServerJsonArrayPostRequest(ctx, ConstantsUsed.URL_TRANSACTION_SUMMARY, ConstantsUsed.TYPE_CREATE_INVOICE, transaction_array);
                }
            }

        }
    }


    private static void syncWithServerImages(Context ctx){
        String id="";
        String path="";
        if(!userId.isEmpty() && !userId.equalsIgnoreCase("-1")) {

            Cursor cur = null;
            try {
                cur = db.getImagesNotUploaded(userId);

                while (cur.moveToNext()) {
                    path = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_IMAGE_PATH)));
                    id = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_ID)));

                    if(!path.equalsIgnoreCase("NO_IMAGE") ){
                        UtilityFunctions.uploadBitmap(UtilityFunctions.getBitMapFromPath(path),ctx,userId,id);
                    }

                }
            }catch (Exception e){

            }
        }

    }


    private static void syncWithServerProduct(Context ctx,String userId){


        if(!userId.isEmpty() && !userId.equalsIgnoreCase("-1")){


            JSONArray array=new JSONArray();


            Cursor cur = null;
            try {
                cur = db.getProductsNotUploaded(userId);

                while (cur.moveToNext()) {
                    String title = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_TITLE)));
                    //String date = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_CAT_DATE)));
                    String unit_measurement = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_UNIT_OF_MEASURE)));
                    String id = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_ID)));
                    String catId = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_PROD_CAT_ID)));
                    String buyingPrice = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_PROD_BUYING_PRICE)));
                    String sellingPrice = cur.getString(cur.getColumnIndex((ConstantsUsed.COLUMN_PRODUCT_SELLING_PRICE)));

                    JSONObject params=new JSONObject();
                    try {
                        params.put(ConstantsUsed.COLUMN_USER_ID,userId);
                        params.put(ConstantsUsed.COLUMN_MOBILE_ID,id);
                        params.put(ConstantsUsed.COLUMN_PRODUCT_CAT_ID,catId);
                        params.put(ConstantsUsed.COLUMN_PRODUCT_SERIAL_CODE,"test");
                        params.put(ConstantsUsed.COLUMN_PRODUCT_TITLE,title);
                        params.put(ConstantsUsed.COLUMN_PRODUCT_DESCRIPTION,"test");
                        params.put(ConstantsUsed.COLUMN_PRODUCT_UNIT_OF_MEASURE,unit_measurement);
                        params.put(ConstantsUsed.COLUMN_PRODUCT_BRAND_CODE,"C1BR1");
                        params.put(ConstantsUsed.COLUMN_PRODUCT_SUPPLIER_CODE,"C5SUP2");
                        params.put(ConstantsUsed.COLUMN_PRODUCT_BUYING_PRICE,buyingPrice);
                        params.put(ConstantsUsed.COLUMN_PRODUCT_SELLING_PRICE,sellingPrice);
                        params.put(ConstantsUsed.COLUMN_PRODUCT_CREATED_DATE,"2019-03-12 10:20:22");
                        array.put(params);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }

            } catch (Exception e) {
                Toast.makeText(ctx, "ERROR" + e.getMessage().toString(), Toast.LENGTH_LONG).show();
            } finally {
                if(cur!=null)
                cur.close();

                if(array.length()>0) {
                    Toast.makeText(ctx, "product", Toast.LENGTH_LONG).show();
                    syncWithServerJsonArrayPostRequest(ctx, ConstantsUsed.URL_CREATE_PRODUCT, ConstantsUsed.TYPE_CREATE_PRODUCT, array);
                }
            }

        }
    }
}




https://stackoverflow.com/questions/54759884/android-cash-drawer-commands
https://stackoverflow.com/questions/31844816/how-to-open-cash-drawer-in-c-sharp-application/47996846#47996846
https://github.com/clover/clover-android-sdk/blob/master/clover-android-sdk/src/main/java/com/clover/sdk/v1/printer/CashDrawer.java
https://github.com/diegoveloper/quickprinter
https://github.com/clover/clover-android-sdk/blob/master/clover-android-sdk/src/main/java/com/clover/sdk/v1/printer/CashDrawer.java
https://stackoverflow.com/questions/28066508/sending-data-to-thermal-printer-from-android-device-via-usb

https://medium.com/@raziaranisandhu/printing-via-usb-android-pos-printers-cbbca638f88e
